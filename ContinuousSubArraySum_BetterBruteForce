/**
Given a list of non-negative numbers and a target integer k, write a function to check if the array has a continuous subarray of size at least 2 that sums up to a multiple of k, that is, sums up to n*k where n is also an integer.

Example 1:
Input: [23, 2, 4, 6, 7],  k=6
Output: True
Explanation: Because [2, 4] is a continuous subarray of size 2 and sums up to 6.

Example 2:
Input: [23, 2, 6, 4, 7],  k=6
Output: True
Explanation: Because [23, 2, 6, 4, 7] is an continuous subarray of size 5 and sums up to 42.
**/

class Solution {
    public boolean checkSubarraySum(int[] nums, int k) {
        
        int[] sums = new int[nums.length];
        sums[0] = nums[0];
        for (int i=1; i<nums.length; i++) {
            sums[i] = sums[i-1] + nums[i];
        }
        
        for (int start=0; start<nums.length-1; start++) {
            for (int end=start+1; end<nums.length; end++) {
                
                int sum = sums[end] - sums[start] + nums[start];
                if ((sum == k) || (k!=0  && (sum%k == 0))) {
                    return true;
                }
            }
        }
        
        return false;
    }
}
