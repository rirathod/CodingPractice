/**
Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.
For example, given n = 3, a solution set is:

[
  "((()))",
  "(()())",
  "(())()",
  "()(())",
  "()()()"
]
**/

class Solution {
    List<String> result = new ArrayList<String>();
    HashSet<String> uniqueParentheseCombinations = new HashSet<String>();
    StringBuilder builder = new StringBuilder();
    
    public List<String> generateParenthesis(int n) {
        char[] parentheses = new char[n*2];
        for (int i=0; i<parentheses.length; i+=2) {
            parentheses[i] = '(';
            parentheses[i+1] = ')';
        }
        
        generateParenthesesHelper(parentheses, 0);
        for (String s: uniqueParentheseCombinations) {
            result.add(s);
        }
        return result;
    }
    
    public void generateParenthesesHelper(char[] parentheses, int index) {
        if (index == parentheses.length) {
            String potentialCandidate = new String(parentheses);
            if (!uniqueParentheseCombinations.contains(potentialCandidate) && isValidParentheses(potentialCandidate)) {
                uniqueParentheseCombinations.add(potentialCandidate);    
            }
            return;
        }
        
        for (int i=index; i<parentheses.length; i++) {
            swap(parentheses, index, i);
            generateParenthesesHelper(parentheses, index+1);
            swap(parentheses, i, index);
        }
    }
    
    public boolean isValidParentheses(String s) {        
        Stack<Character> stack = new Stack<Character>();
        
        for (int i=0; i<s.length(); i++) {
            if (s.charAt(i) == '(') {
                stack.push(s.charAt(i));
            } else if (s.charAt(i) == ')') {
                if (!stack.isEmpty()) {
                    stack.pop();
                } else {
                    return false;
                }
            } else {
                return false;
            }
        }
        
        if (!stack.isEmpty()) return false;
        
        return true;
    }
    
    
    public void swap(char[] parentheses, int i, int j) {
        char temp = parentheses[i];
        parentheses[i] = parentheses[j];
        parentheses[j] = temp;
    }
}
