/*
Given an array of integers arr, a lucky integer is an integer which has a frequency in the array equal to its value.
Return a lucky integer in the array. If there are multiple lucky integers return the largest of them. If there is no lucky integer return -1.

Example 1:
Input: arr = [2,2,3,4]
Output: 2
Explanation: The only lucky number in the array is 2 because frequency[2] == 2.

Example 2:
Input: arr = [1,2,2,3,3,3]
Output: 3
Explanation: 1, 2 and 3 are all lucky numbers, return the largest of them.

Example 3:
Input: arr = [2,2,2,3,3]
Output: -1
Explanation: There are no lucky numbers in the array.

Example 4:
Input: arr = [5]
Output: -1

Example 5:
Input: arr = [7,7,7,7,7,7,7]
Output: 7
*/


class Solution {
    public int findLucky(int[] arr) {
        Map<Integer, Integer> frequencyMap = new HashMap<Integer, Integer>();
        ArrayList<Integer> luckyNumbers = new ArrayList<Integer>();
        
        for (int i=0; i<arr.length; i++) {
            if (!frequencyMap.containsKey(arr[i])) {
                frequencyMap.put(arr[i], 0);
            } 
            frequencyMap.put(arr[i], frequencyMap.get(arr[i])+1);
        }
        
        //System.out.println("FrequencyMap:-");
        for (Map.Entry<Integer, Integer> entry: frequencyMap.entrySet()) {
            //System.out.print("Key=" + entry.getKey());
            //System.out.println("; Value=" + entry.getValue());
            
            if (entry.getKey() == entry.getValue()) {
                luckyNumbers.add(entry.getKey());
            }
        } 
        
        //System.out.println();
        //System.out.println("LuckyNumbers:-");
        int maxLuckyNumber = Integer.MIN_VALUE;
        for (Integer number: luckyNumbers) {
            //System.out.print(number + " ");
            if (number > maxLuckyNumber) {
                maxLuckyNumber = number;
            }
        }
        
        return maxLuckyNumber == Integer.MIN_VALUE ? -1 : maxLuckyNumber;
    }
}