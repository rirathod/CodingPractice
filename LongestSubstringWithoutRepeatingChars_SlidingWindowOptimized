/*
Given a string, find the length of the longest substring without repeating characters.

Example 1:
Input: "abcabcbb"
Output: 3 
Explanation: The answer is "abc", with the length of 3. 

Example 2:
Input: "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.

Example 3:
Input: "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3. 
             Note that the answer must be a substring, "pwke" is a subsequence and not a substring.
*/

class Solution {
    public int lengthOfLongestSubstring(String s) {
        if (s == null) {
            return 0;
        }
                
        int ans = 0;
        int n = s.length();
        
        HashMap<Character, Integer> uniqueCharMap = new HashMap<Character, Integer>();
        int i=0;
        for (int j=0; j<n; j++) {
            //System.out.println("i: " + i + "; j: " + j + "; CurrentChar: " + s.charAt(j));
            char currentChar = s.charAt(j);
            
            if (uniqueCharMap.containsKey(currentChar)) {
                i = Math.max(uniqueCharMap.get(currentChar)+1, i);
            }
            
            uniqueCharMap.put(currentChar, j);
            //printMap(uniqueCharMap);
            
            ans = Math.max(ans, j-i+1); 
            //System.out.println("Ans: " + ans);
            //System.out.println();
        }
        
        return ans;
    }
    
    public void printMap(HashMap<Character, Integer> map) {
        for (Map.Entry<Character, Integer> entry: map.entrySet()) {
            System.out.print("Key: " + entry.getKey());
            System.out.println("; Value: " + entry.getValue());
        }
    }
}
