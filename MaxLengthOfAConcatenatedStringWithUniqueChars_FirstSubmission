/**
Given an array of strings arr. String s is a concatenation of a sub-sequence of arr which have unique characters.
Return the maximum possible length of s.

Example 1:
Input: arr = ["un","iq","ue"]
Output: 4
Explanation: All possible concatenations are "","un","iq","ue","uniq" and "ique".
Maximum length is 4.

Example 2:
Input: arr = ["cha","r","act","ers"]
Output: 6
Explanation: Possible solutions are "chaers" and "acters".

Example 3:
Input: arr = ["abcdefghijklmnopqrstuvwxyz"]
Output: 26

Constraints:
1 <= arr.length <= 16
1 <= arr[i].length <= 26
arr[i] contains only lower case English letters.
**/

class Solution {
    HashSet<String> subsequences = new HashSet<String>();
    
    public int maxLength(List<String> arr) {
        int index = 0;
        maxLengthHelper(arr, index, new StringBuilder());
        
        int maxLength = Integer.MIN_VALUE;
        for (String s: subsequences) {
            System.out.println(s);
            maxLength = Math.max(maxLength, s.length());    
        }
                
        return maxLength == Integer.MIN_VALUE ? 0 : maxLength;
    }
    
    public void maxLengthHelper(List<String> arr, int index, StringBuilder sb) {
        if (index == arr.size()) {
            subsequences.add(sb.toString());
        }
        
        for (int i=index; i<arr.size(); i++) {
            String s = arr.get(i);
            sb.append(s);
            if (!isUnique(sb.toString())) {
                sb.delete(sb.length()-s.length(), sb.length());
                continue;
            }
            
            maxLengthHelper(arr, i+1, sb);
            sb.delete(sb.length()-s.length(), sb.length());
        }
        
        subsequences.add(sb.toString());
    }
    
    public boolean isUnique(String s) {
        int[] uniqueChars = new int[26];
        boolean isUnique = false;
        
        for (int i=0; i<s.length(); i++) {
            char c = s.charAt(i);
            if (uniqueChars[c-'a'] != 0) {
                isUnique = false;
                break;
            }
            uniqueChars[c-'a']++;
            isUnique = true;
        } 
        
        return isUnique;
    }
}
