/**
Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.

Example 1:
Input: "babad"
Output: "bab"
Note: "aba" is also a valid answer.

Example 2:
Input: "cbbd"
Output: "bb"
**/

class Solution {
    ArrayList<String> substringCombinations = new ArrayList<String>();
    
    
    public String longestPalindrome(String s) {
        if (s == null) 
            return null;
        
        findAllSubstringCombinations(s, 0, s.length());
        
        String result = "";
        int maxLength = Integer.MIN_VALUE;
        for (String combination: substringCombinations) {
            if (isPalindrome(combination)) {
                if (combination.length() > maxLength) {
                    maxLength = combination.length();
                    result = combination;
                }
            }
        }
        
        return result;
    }
    
    public void findAllSubstringCombinations(String s, int start, int end) {
        if (start > end) {
            return;
        }
        
        for (int i=start; i<end; i++) {
            for (int j=i+1; j<=end; j++) {
                //System.out.println("i: " + i + "; j: " + j);
                substringCombinations.add(s.substring(i, j));
            }   
        }
    }
    
    public boolean isPalindrome(String s) {
        int i=0;
        int j=s.length()-1;
        
        while(i<j) {
            if (s.charAt(i) == s.charAt(j)) {
                i++;
                j--;
                continue;
            } 
            return false;
        }
        
        return true;
    }
}
