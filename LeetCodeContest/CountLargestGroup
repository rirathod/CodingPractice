/*
Given an integer n. Each number from 1 to n is grouped according to the sum of its digits. 
Return how many groups have the largest size.

Example 1:
Input: n = 13
Output: 4
Explanation: There are 9 groups in total, they are grouped according sum of its digits of numbers from 1 to 13:
[1,10], [2,11], [3,12], [4,13], [5], [6], [7], [8], [9]. There are 4 groups with largest size.

Example 2:
Input: n = 2
Output: 2
Explanation: There are 2 groups [1], [2] of size 1.

Example 3:
Input: n = 15
Output: 6

Example 4:
Input: n = 24
Output: 5
*/

class Solution {
    public int countLargestGroup(int n) {
        
        HashMap<Integer, List<Integer>> groups = new HashMap<Integer, List<Integer>>();
        int mapKey = 0;
        for (int i=1; i<=n; i++) {            
            mapKey = sumOfDigits(i);
            
            if (!groups.containsKey(mapKey)) {
                groups.put(mapKey, new ArrayList<Integer>());
            }
            
            groups.get(mapKey).add(i); 
        }
        
        int maxLength = Integer.MIN_VALUE;
        int countLargestGroups = 0;
        for (Map.Entry<Integer, List<Integer>> entry: groups.entrySet()) {
            if (maxLength < entry.getValue().size()) {
                maxLength = entry.getValue().size();
                countLargestGroups = 0;
            }
            
            if (maxLength == entry.getValue().size()) {
                countLargestGroups += 1;
            }
        }
        
        return countLargestGroups;
    }
    
    public int sumOfDigits(int n) {
        int sum = 0;
        while (n > 0) {
            sum += n%10;
            n = n/10;
        }
               
        return sum;
    }
}
