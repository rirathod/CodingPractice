/*
There are n soldiers standing in a line. Each soldier is assigned a unique rating value.

You have to form a team of 3 soldiers amongst them under the following rules:
Choose 3 soldiers with index (i, j, k) with rating (rating[i], rating[j], rating[k]).
A team is valid if:  (rating[i] < rating[j] < rating[k]) or (rating[i] > rating[j] > rating[k]) where (0 <= i < j < k < n).
Return the number of teams you can form given the conditions. (soldiers can be part of multiple teams). 

Example 1:
Input: rating = [2,5,3,4,1]
Output: 3
Explanation: We can form three teams given the conditions. (2,3,4), (5,4,1), (5,3,1). 

Example 2:
Input: rating = [2,1,3]
Output: 0
Explanation: We can't form any team given the conditions.

Example 3:
Input: rating = [1,2,3,4]
Output: 4
*/


class Solution {
    public int numTeams(int[] rating) {
        int numTeams = 0;
        
        int[] team = new int[3];
        numTeams = recurseToFindTeamRatings(rating, team, 0, rating.length-1, 0, team.length, numTeams);
        
        return numTeams;
    }
    
    public int recurseToFindTeamRatings(int[] rating,
                                         int[] teamRating,
                                         int start, 
                                         int end, 
                                         int currentTeamLength, 
                                         int desiredTeamLength,
                                         int numTeams) {
        
        
        //System.out.println("recurseToFindTeamRatings: start=" + start + " end=" + end + " currentTeamLength=" + currentTeamLength + " desiredTeamLength=" + desiredTeamLength + " numTeams=" + numTeams);
        
        if (currentTeamLength == desiredTeamLength) {
            if ((teamRating[0] < teamRating[1] && teamRating[1] < teamRating[2]) 
                || (teamRating[0] > teamRating[1] && teamRating[1] > teamRating[2])) {
                numTeams++;    
            }
            
            /*
            for (int j=0; j<teamRating.length; j++) {
                System.out.print(teamRating[j] + " ");                
            }
            System.out.println();
            
            if (teamRating[0] < teamRating[1] && teamRating[1] < teamRating[2]) {
                System.out.println(Arrays.toString(teamRating));   
                numTeams = numTeams + 1;
            }
            
            if (teamRating[0] > teamRating[1] && teamRating[1] > teamRating[2]) {
                System.out.println(Arrays.toString(teamRating));   
                numTeams = numTeams + 1;
            }
            */
            
            return numTeams;
        }
        
        for (int i=start; i<=end && (end-i+1)>=(desiredTeamLength-currentTeamLength); i++) {
            //System.out.println("i=" + i + "; currentTeamLength=" + currentTeamLength);
            teamRating[currentTeamLength] = rating[i];
            numTeams = recurseToFindTeamRatings(rating, teamRating, i+1, end, currentTeamLength+1, desiredTeamLength, numTeams);
        }
        
        return numTeams;
    }
}