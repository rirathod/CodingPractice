/**
Given a 2d grid map of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

Example 1:
Input: grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
Output: 1

Example 2:
Input: grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
Output: 3
**/

class Solution {
    
    class UnionFind {
        private int[] parent;
        private int count = 0;
        
        public UnionFind(char[][] grid, int total) {
            parent = new int[total];
            for (int i=0; i<total; i++) {
                parent[i] = i;
            }
            
            for (int i=0; i<grid.length; i++) {
                for (int j=0; j<grid[0].length; j++) {
                    if (grid[i][j] == '1') count++;
                }
            }
        }
        
        public int find(int x) {
            while (x != parent[x]) {
                parent[x] = parent[parent[x]];
                x = parent[x];
            } 
            
            return x;
        }
        
        public void union(int x, int y) {
            int findX = find(x);
            int findY = find(y);
                
            if (findX == findY) return;
            parent[findX] = findY;
            count--;
        }
    }
    
    public int numIslands(char[][] grid) {
        if (grid == null || grid.length == 0) return 0;
        
        int m = grid.length;
        int n = grid[0].length;
        UnionFind uf = new UnionFind(grid, m*n);
        
        for (int i=0; i<m; i++) {
            for (int j=0; j<n; j++) {
                if (grid[i][j] == '0') continue;
                
                grid[i][j] = '1';
                int p = i * n + j;
                int q;
                if ((i-1) >= 0 && grid[i-1][j] == '1') {
                    q = p-n;
                    uf.union(p, q);
                }
                
                if ((i+1) < m && grid[i+1][j] == '1') {
                    q = p+n;
                    uf.union(p, q);
                }
                
                if ((j-1) >= 0 && grid[i][j-1] == '1') {
                    q = p-1;
                    uf.union(p, q);
                }
                
                if ((j+1) < n && grid[i][j+1] == '1') {
                    q = p+1;
                    uf.union(p, q);
                }
            }
        }
        
        return uf.count;
    }
}
