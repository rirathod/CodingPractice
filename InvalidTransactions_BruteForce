/**
A transaction is possibly invalid if:
the amount exceeds $1000, or;
if it occurs within (and including) 60 minutes of another transaction with the same name in a different city.

Each transaction string transactions[i] consists of comma separated values representing the name, time (in minutes), amount, and city of the transaction.
Given a list of transactions, return a list of transactions that are possibly invalid.  You may return the answer in any order.

Example 1:
Input: transactions = ["alice,20,800,mtv","alice,50,100,beijing"]
Output: ["alice,20,800,mtv","alice,50,100,beijing"]
Explanation: The first transaction is invalid because the second transaction occurs within a difference of 60 minutes, have the same name and is in a different city. Similarly the second one is invalid too.

Example 2:
Input: transactions = ["alice,20,800,mtv","alice,50,1200,mtv"]
Output: ["alice,50,1200,mtv"]

Example 3:
Input: transactions = ["alice,20,800,mtv","bob,50,1200,mtv"]
Output: ["bob,50,1200,mtv"]

Constraints:
transactions.length <= 1000
Each transactions[i] takes the form "{name},{time},{amount},{city}"
Each {name} and {city} consist of lowercase English letters, and have lengths between 1 and 10.
Each {time} consist of digits, and represent an integer between 0 and 1000.
Each {amount} consist of digits, and represent an integer between 0 and 2000.
**/

class Solution {
    public List<String> invalidTransactions(String[] transactions) {
        int n = transactions.length;
        
        String[] name = new String[n];
        int[] time = new int[n];
        int[] amount = new int[n];
        String[] city = new String[n];
        boolean[] isInvalid = new boolean[n];
        
        for (int i=0; i<n; i++) {
            String[] currentTransaction = transactions[i].split(",");
            name[i] = currentTransaction[0];
            time[i] = Integer.parseInt(currentTransaction[1]);
            amount[i] = Integer.parseInt(currentTransaction[2]);
            city[i] = currentTransaction[3];
        }
        
        for (int i=0; i<n; i++) {            
            if (amount[i] > 1000) {
                isInvalid[i] = true;    
            }
            
            for (int j=i+1; j<n; j++) {
                if (name[i].equals(name[j]) && Math.abs(time[i] - time[j]) <= 60 && !city[i].equals(city[j])) {
                    isInvalid[i] = true;    
                    isInvalid[j] = true;
                }
            }
        }
        
        List<String> result = new ArrayList<String>();
        for (int i=0; i<n; i++) {
            if (isInvalid[i]) result.add(transactions[i]);
        } 
        
        return result;
    }
}
