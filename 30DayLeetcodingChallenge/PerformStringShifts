/*
You are given a string s containing lowercase English letters, and a matrix shift, where shift[i] = [direction, amount]:

direction can be 0 (for left shift) or 1 (for right shift). 
amount is the amount by which string s is to be shifted.
A left shift by 1 means remove the first character of s and append it to the end.
Similarly, a right shift by 1 means remove the last character of s and add it to the beginning.
Return the final string after all operations.

Example 1:
Input: s = "abc", shift = [[0,1],[1,2]]
Output: "cab"
Explanation: 
[0,1] means shift to left by 1. "abc" -> "bca"
[1,2] means shift to right by 2. "bca" -> "cab"

Example 2:
Input: s = "abcdefg", shift = [[1,1],[1,1],[0,2],[1,3]]
Output: "efgabcd"
Explanation:  
[1,1] means shift to right by 1. "abcdefg" -> "gabcdef"
[1,1] means shift to right by 1. "gabcdef" -> "fgabcde"
[0,2] means shift to left by 2. "fgabcde" -> "abcdefg"
[1,3] means shift to right by 3. "abcdefg" -> "efgabcd"
*/

class Solution {
    StringBuilder builder;
    
    public String stringShift(String s, int[][] shift) {
        builder = new StringBuilder(s);
        
        for (int i=0; i<shift.length; i++) {
            int direction = shift[i][0];
            
            System.out.print("direction: " + direction);
            System.out.println("; amount: " + shift[i][1]);
            
            if (direction == 0) {
                leftShift(shift[i][1]);
            } else {
                rightShift(shift[i][1]);
            }
            System.out.println("Transformed string: " + builder.toString());
            System.out.println();
        }
        
        return builder.toString();
    }
    
    public void leftShift(int amount) {
        for (int i=0; i<amount; i++) {
            char firstChar = builder.charAt(0);
            builder.deleteCharAt(0);
            builder.append(firstChar);
        }
    }
    
    public void rightShift(int amount) {
        for (int i=0; i<amount; i++) {            
            char lastChar = builder.charAt(builder.length()-1);
            builder.deleteCharAt(builder.length()-1);
            builder.insert(0, lastChar);
        }
    }
}
