/*
Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.
push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.

Example:
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --> Returns -3.
minStack.pop();
minStack.top();      --> Returns 0.
minStack.getMin();   --> Returns -2.

Hint #1  
Consider each node in the stack having a minimum value
*/

import java.util.*; 

class ListNode {
    int val;
    int min;
    
    ListNode(int value, int minimum) {
        this.val = value;
        this.min = minimum;
    }
}

class MinStack {
    int minElement;
    LinkedList<ListNode> stack;
    
    /** initialize your data structure here. */
    public MinStack() {
        minElement = Integer.MAX_VALUE;
        stack = new LinkedList<ListNode>();
    }
    
    public void push(int x) {
        if (x < minElement) {
            minElement = x;
        }
        
        ListNode element = new ListNode(x, minElement);
        stack.add(element);
    }
    
    public void pop() {
        if (stack.size() > 0) {
            stack.removeLast();
            minElement = getMin();
        }
    }
    
    public int top() {
        if (stack.size() <= 0) {
            return -1;
        } else {
            ListNode topElement = stack.get(stack.size()-1);
            return topElement.val;
        }
    }
    
    public int getMin() {
        if (stack.size() <= 0) {
            return Integer.MAX_VALUE;
        } else {            
            ListNode topElement = stack.get(stack.size()-1);
            return topElement.min;
        }
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
