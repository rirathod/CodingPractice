/**
Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, determine if s can be segmented into a space-separated sequence of one or more dictionary words.

Note:

The same word in the dictionary may be reused multiple times in the segmentation.
You may assume the dictionary does not contain duplicate words.

Example 1:
Input: s = "leetcode", wordDict = ["leet", "code"]
Output: true
Explanation: Return true because "leetcode" can be segmented as "leet code".

Example 2:
Input: s = "applepenapple", wordDict = ["apple", "pen"]
Output: true
Explanation: Return true because "applepenapple" can be segmented as "apple pen apple".
             Note that you are allowed to reuse a dictionary word.

Example 3:
Input: s = "catsandog", wordDict = ["cats", "dog", "sand", "and", "cat"]
Output: false
**/

class Solution {
    public boolean wordBreak(String s, List<String> wordDict) {
        return wordBreakHelper(s, new HashSet<String>(wordDict), 0);
    }
    
    public boolean wordBreakHelper(String s, HashSet<String> set, int start) {
        if (s.length() == start) {
            return true;
        }

        for (int end=start+1; end<=s.length(); end++) {
            if (set.contains(s.substring(start, end)) && wordBreakHelper(s, set, end)) {
                return true;
            }
        }
        return false;
    }
}
