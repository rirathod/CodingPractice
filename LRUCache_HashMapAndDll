/**
Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.
get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.

The cache is initialized with a positive capacity.

Follow up:
Could you do both operations in O(1) time complexity?

Example:
LRUCache cache = new LRUCache( 2 /* capacity */ );
cache.put(1, 1);
cache.put(2, 2);
cache.get(1);       // returns 1
cache.put(3, 3);    // evicts key 2
cache.get(2);       // returns -1 (not found)
cache.put(4, 4);    // evicts key 1
cache.get(1);       // returns -1 (not found)
cache.get(3);       // returns 3
cache.get(4);       // returns 4
**/

class LRUCache {
    class DoublyLinkedNode {
        int val;
        int key;
        DoublyLinkedNode prev;
        DoublyLinkedNode next;
    }
    
    public void addNode(DoublyLinkedNode node) {
        node.prev = head;
        node.next = head.next;
        
        head.next.prev = node;
        head.next = node;
    }
    
    public void removeNode(DoublyLinkedNode node) {
        DoublyLinkedNode before = node.prev;
        DoublyLinkedNode after = node.next;
        
        before.next = after;
        after.prev = before;
    }
    
    public void moveToHead(DoublyLinkedNode node) {
        removeNode(node);
        addNode(node);
    }
    
    public DoublyLinkedNode popTail() {
        DoublyLinkedNode nodeToBeDeleted = tail.prev;
        removeNode(nodeToBeDeleted);
        return nodeToBeDeleted;
    }
        
    HashMap<Integer, DoublyLinkedNode> lruMap;
    DoublyLinkedNode head, tail;
    int capacity;
    int size;
    
    public LRUCache(int capacity) {
        this.lruMap = new HashMap<Integer, DoublyLinkedNode>();
        this.capacity = capacity;
        this.size = 0;
        
        head = new DoublyLinkedNode();
        tail = new DoublyLinkedNode();
        
        head.next = tail;
        tail.prev = head;
    }
    
    public int get(int key) {
        DoublyLinkedNode node = lruMap.get(key);
        if (node == null)  return -1;
    
        moveToHead(node);    
        return node.val;
    }
    
    public void put(int key, int value) {
        DoublyLinkedNode node = lruMap.get(key);
        
        if (node == null) {
            node = new DoublyLinkedNode();
            node.key = key;
            node.val = value;
            addNode(node);
            lruMap.put(key, node);

            if (++this.size > this.capacity) {
                DoublyLinkedNode tailNode = popTail();
                lruMap.remove(tailNode.key);
                this.size--;
            }
        }
        else {    
            node.val = value;
            moveToHead(node);
        }
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
