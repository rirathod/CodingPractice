/**
Given a binary tree, return the inorder traversal of its nodes' values.

Example:
Input: [1,null,2,3]
   1
    \
     2
    /
   3

Output: [1,3,2]
Follow up: Recursive solution is trivial, could you do it iteratively?
**/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> inorderTraversalList = new ArrayList<Integer>();
        if (root ==  null) {
            return inorderTraversalList;
        }
        
        Stack<TreeNode> stack = new Stack<TreeNode>();
        stack.add(root);
        while (!stack.isEmpty()) {            
            TreeNode current = stack.peek();
            
            // Going deep in the left subtree
            while (current.left != null) {
                stack.add(current.left);
                current = current.left;
            }
            
            // Adding left subtree to return list and
            // removing from stack since it is processed
            current = stack.pop();
            inorderTraversalList.add(current.val);
            
            // Popping out elements that have right child as null
            while (!stack.isEmpty() && current.right == null) {
                current = stack.pop(); 
                inorderTraversalList.add(current.val);
            }
            
            if (current.right != null) {
                stack.add(current.right);
            }            
        }
        
        return inorderTraversalList;
        
    }
}
