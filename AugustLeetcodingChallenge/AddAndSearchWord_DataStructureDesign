/**
Design a data structure that supports the following two operations:
void addWord(word)
bool search(word)
search(word) can search a literal word or a regular expression string containing only letters a-z or .. A . means it can represent any one letter.

Example:
addWord("bad")
addWord("dad")
addWord("mad")
search("pad") -> false
search("bad") -> true
search(".ad") -> true
search("b..") -> true
Note:
You may assume that all words are consist of lowercase letters a-z.
**/

class WordDictionary {

    class TrieNode {
        Map<Character, TrieNode> children = new HashMap<Character, TrieNode>();
        boolean isEndOfWord;
    }
    
    TrieNode root;
    public WordDictionary() {
        root = new TrieNode();
    }
    
    /** Adds a word into the data structure. */
    public void addWord(String word) {
        TrieNode node = root;
        
        for (int i=0; i<word.length(); i++) {
            char c = word.charAt(i);
            
            if (!node.children.containsKey(c)) {
                node.children.put(c, new TrieNode());
            }
            node = node.children.get(c);
        }
        
        node.isEndOfWord = true;
    }
    
    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
    public boolean search(String word) {
        return searchHelper(word, root);
    }
    
    private boolean searchHelper(String word, TrieNode node) {
        for(int i=0; i<word.length(); i++) {
            char c = word.charAt(i);
            
            if (node.children.containsKey(c)) {
                node = node.children.get(c);
            } else {
                if (c == '.') {
                    for (Map.Entry<Character, TrieNode> entry : node.children.entrySet()) {
                        if (searchHelper(word.substring(i+1), entry.getValue())) {
                            return true;
                        }
                    }
                }
                return false;
            }
        }
        
        return node.isEndOfWord;
    }
}

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary obj = new WordDictionary();
 * obj.addWord(word);
 * boolean param_2 = obj.search(word);
 */
