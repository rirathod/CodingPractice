/*
Given a string, find the length of the longest substring without repeating characters.

Example 1:
Input: "abcabcbb"
Output: 3 
Explanation: The answer is "abc", with the length of 3. 

Example 2:
Input: "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.

Example 3:
Input: "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3. 
             Note that the answer must be a substring, "pwke" is a subsequence and not a substring.
*/

class Solution {
    public int lengthOfLongestSubstring(String s) {
        if (s == null) {
            return 0;
        }
                
        int ans = 0;
        int n = s.length();
        
        HashSet<Character> uniqueCharSet = new HashSet<Character>();
        int i=0;
        int j=0;
        while (i<n && j<n) {
            char currentChar = s.charAt(j);
            
            if (!uniqueCharSet.contains(currentChar)) {
                uniqueCharSet.add(currentChar);
                j++;
                ans = Math.max(ans, j-i);
            } else {
                uniqueCharSet.remove(s.charAt(i));
                i++;
            }
        }
        
        return ans;
    }
}
