/**
Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.
You may assume that the array is non-empty and the majority element always exist in the array.

Example 1:
Input: [3,2,3]
Output: 3

Example 2:
Input: [2,2,1,1,1,2,2]
Output: 2
**/

class Solution {
    HashMap<Integer, Integer> frequencyMap = new HashMap<Integer, Integer>();
    
    public int majorityElement(int[] nums) {
        int majorityElementCutoff = nums.length/2;
        
        for (int i=0; i<nums.length; i++) {
            frequencyMap.put(nums[i], frequencyMap.getOrDefault(nums[i], 0) + 1);
        }
        
        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {
            if (entry.getValue() > majorityElementCutoff) {
                return entry.getKey();
            }
        }
        
        throw new IllegalArgumentException("Majority element does not exist");
    }
}
