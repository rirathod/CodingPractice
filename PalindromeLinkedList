/**
Given a singly linked list, determine if it is a palindrome.

Example 1:
Input: 1->2
Output: false

Example 2:
Input: 1->2->2->1
Output: true

Follow up:
Could you do it in O(n) time and O(1) space?
**/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public boolean isPalindrome(ListNode head) {
        if (head == null) return true;
        
        boolean isPalindrome = true;
        
        ListNode endOfFirsHalf = findEndOfFirstHalf(head);
        ListNode reversedSecondHalf = reverse(endOfFirsHalf.next);
        
        ListNode ptr1 = head;
        ListNode ptr2 = reversedSecondHalf;
        while (isPalindrome && ptr2 != null) {
            if (ptr1.val != ptr2.val) 
                isPalindrome = false;
            ptr1 = ptr1.next;
            ptr2 = ptr2.next;
        }
        
        endOfFirsHalf.next = reverse(reversedSecondHalf);
        return isPalindrome;
    }
    
    public ListNode findEndOfFirstHalf(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;
        while (fast.next != null && fast.next.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        
        return slow;
    }
    
    public ListNode reverse(ListNode head) {        
        ListNode prev = null;
        ListNode current = head;
        
        while (current != null) {
            ListNode next = current.next;
            
            current.next = prev;
            prev = current;
            current = next;
        }
        
        return prev;
    }
}
