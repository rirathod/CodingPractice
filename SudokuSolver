/**
Write a program to solve a Sudoku puzzle by filling the empty cells.

A sudoku solution must satisfy all of the following rules:
Each of the digits 1-9 must occur exactly once in each row.
Each of the digits 1-9 must occur exactly once in each column.
Each of the the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.
Empty cells are indicated by the character '.'.

Note:
The given board contain only digits 1-9 and the character '.'.
You may assume that the given Sudoku puzzle will have a single unique solution.
The given board size is always 9x9.
**/

class Solution {
    public void solveSudoku(char[][] board) {
        solve(board);
    }
    
    public boolean solve(char[][] board) {
        for (int i=0; i<board.length; i++) {
            for (int j=0; j<board[0].length; j++) {
                
                if (board[i][j] != '.') continue;
                
                for (char c='1'; c<='9'; c++) {
                    if (isEligiblePosition(board, i, j, c)) {
                        board[i][j] = c;
                        if (solve(board)) return true;
                        board[i][j] = '.';
                    }
                }
                return false;
            }
        }
        
        return true;
    }
    
    public boolean isEligiblePosition(char[][] board, int row, int column, char character) {
        int boxRow = (3 * (row/3));
        int boxColumn = (3 * (column/3));
        
        for (int i=0; i<9; i++) {
            if (board[i][column] == character) return false;
            if (board[row][i] == character) return false;
            if (board[boxRow + i/3][boxColumn + i%3] == character) return false;
        }
        
        return true;
    }
}
