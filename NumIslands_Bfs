class Solution {
    public int numIslands(char[][] grid) {
        if (grid == null || grid.length == 0) return 0;
        
        int count=0;
         for (int i=0; i<grid.length; i++) {
            for (int j=0; j<grid[0].length; j++) {
                
                if (grid[i][j] == '1') {
                    count++;
                    grid[i][j] = '0';
                    
                    Queue<Integer> queue = new LinkedList<Integer>();
                    queue.add(i * grid[0].length + j);
                
                    while (!queue.isEmpty()) {
                        int id = queue.remove();
                        int row = id / grid[0].length;
                        int column = id % grid[0].length;

                        if (row-1 >= 0 && grid[row-1][column] == '1') {
                            queue.add((row-1) * grid[0].length + column);
                            grid[row-1][column] = '0';
                        }
                        
                        if (row+1 < grid.length && grid[row+1][column] == '1') {
                            queue.add((row+1) * grid[0].length + column);
                            grid[row+1][column] = '0';
                        }
                        
                        if (column-1 >= 0 && grid[row][column-1] == '1') {
                            queue.add(row * grid[0].length + (column-1));
                            grid[row][column-1] = '0';
                        }
                        
                        if (column+1 < grid[0].length && grid[row][column+1] == '1') {
                            queue.add(row * grid[0].length + (column+1));
                            grid[row][column+1] = '0';
                        }
                    }   
                }
            }
         }
        
        return count;
    }
}