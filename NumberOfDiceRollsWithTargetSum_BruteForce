/**
You have d dice, and each die has f faces numbered 1, 2, ..., f.
Return the number of possible ways (out of fd total ways) modulo 10^9 + 7 to roll the dice so the sum of the face up numbers equals target

Example 1:
Input: d = 1, f = 6, target = 3
Output: 1
Explanation: 
You throw one die with 6 faces.  There is only one way to get a sum of 3.

Example 2:
Input: d = 2, f = 6, target = 7
Output: 6
Explanation: 
You throw two dice, each with 6 faces.  There are 6 ways to get a sum of 7:
1+6, 2+5, 3+4, 4+3, 5+2, 6+1.

Example 3:
Input: d = 2, f = 5, target = 10
Output: 1
Explanation: 
You throw two dice, each with 5 faces.  There is only one way to get a sum of 10: 5+5.

Example 4:
Input: d = 1, f = 2, target = 3
Output: 0
Explanation: 
You throw one die with 2 faces.  There is no way to get a sum of 3.

Example 5:
Input: d = 30, f = 30, target = 500
Output: 222616187
Explanation: 
The answer must be returned modulo 10^9 + 7.
**/

class Solution {
    static int possibleWays = 0;
    
    public static int numRollsToTarget(int d, int f, int target) {
        possibleWays = 0;
        int[] dices = new int[f];
        for (int i=0; i<dices.length; i++) {
            dices[i] = i+1;
        }
    
        findPossibleWaysHelper(0, dices, target, d, new ArrayList<Integer>());
        return possibleWays;
    }

    public static void findPossibleWaysHelper(int start, 
                                            int[] dices, 
                                            int target, 
                                            int d,
                                            List<Integer> currentCombination) {
        if (currentCombination.size() > d || target < 0) return;
        if (currentCombination.size() == d) {
            if (target == 0) {
                possibleWays++;
            }
            return;
        }
  
        for (int i=start; i<dices.length; i++) {
            currentCombination.add(dices[i]);
            findPossibleWaysHelper(start, dices, target-dices[i], d, currentCombination);
            currentCombination.remove(currentCombination.size()-1);
        }
    }
}
