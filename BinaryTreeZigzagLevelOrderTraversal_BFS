/**
Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).
For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its zigzag level order traversal as:
[
  [3],
  [20,9],
  [15,7]
]
**/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        if (root == null) {
            return result;
        }
        
        Queue<TreeNode> bfsQueue = new LinkedList<TreeNode>();
        Queue<Integer> levelOrder = new LinkedList<Integer>();
        bfsQueue.add(root);
        levelOrder.add(0);
        
        List<Integer> evenLevel = new ArrayList<Integer>();
        List<Integer> oddLevel = new ArrayList<Integer>();
        
        while(!bfsQueue.isEmpty()) {
            TreeNode currentNode = bfsQueue.remove();
            int currentLevel = levelOrder.remove();
            
            // Add elements in evenLevel or oddLevel lists
            if (currentLevel%2 == 0) {
                if (oddLevel.size() != 0) {
                    
                    Collections.reverse(oddLevel);
                    result.add(oddLevel);
                    oddLevel = new ArrayList<Integer>();
                }
                
                evenLevel.add(currentNode.val);
            } else {
                if (evenLevel.size() != 0) { 
                    result.add(evenLevel);
                    evenLevel = new ArrayList<Integer>();
                }
                
                oddLevel.add(currentNode.val);
            }
            
            if (currentNode.left != null) {
                bfsQueue.add(currentNode.left);
                levelOrder.add(currentLevel+1);
            }
            
            if (currentNode.right != null) {
                bfsQueue.add(currentNode.right);
                levelOrder.add(currentLevel+1);
            }   
        }
        
        if (evenLevel.size() != 0) {
            result.add(evenLevel);
        } else if (oddLevel.size() != 0) {
            Collections.reverse(oddLevel);
            result.add(oddLevel);
        }
        
        return result;
    }
}
