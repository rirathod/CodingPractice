/**
Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Example:
Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.

Follow up:
If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.
**/

class Solution {
    public int maxSubArray(int[] nums) {
        if (nums.length == 0) {
            return 0;
        }
        
        return maxSubArrayHelper(nums, 0, nums.length-1);
    }
    
    public int maxSubArrayHelper(int[] nums, int low, int high) {        
        if (low > high) {
            return 0;
        }
        
        if (low == high) {
            int returnValue = nums[low];
            return returnValue;
        }
        
        int mid = (high+low)/2;
        int leftSubarrayMax = maxSubArrayHelper(nums, low, mid);
        int rightSubarrayMax = maxSubArrayHelper(nums, mid+1, high);
        int crossSum = crossSum(nums, low, high, mid);
        
        return Math.max(Math.max(leftSubarrayMax, rightSubarrayMax), crossSum);
    }
    
    public int crossSum(int[] nums, int low, int high, int mid) {
        if (low == high) {
            return nums[low];
        }
        
        int leftSum = Integer.MIN_VALUE;
        int currSum = 0;
        for (int i=mid; i>=low; i--) {
            currSum += nums[i];
            leftSum = Math.max(leftSum, currSum);
        }
        
        int rightSum = Integer.MIN_VALUE;
        currSum = 0;
        for (int i=mid+1; i<=high; i++) {
            currSum += nums[i];
            rightSum = Math.max(rightSum, currSum);
        }
        
        return leftSum + rightSum;
    }
}
