class Solution {
    public int findRotateIndex(int[] nums, int start, int end) {
        if (nums[start] < nums[end]) return 0;
        
        while (start <= end) {
            int pivot = (start + end)/2;
            
            if (nums[pivot] > nums[pivot+1]) {
                return pivot+1;
            } else  {
                /*
                if (nums[start] < nums[pivot]) {
                    start = pivot+1;
                } else {
                    end = pivot-1;
                } 
                */
                
                if (nums[pivot] < nums[start]) {
                    end = pivot-1;
                } else {
                    start = pivot+1;
                } 
            }
        }
        
        return 0;
    }
    
    public int searchInArray(int[] nums, int start, int end, int target) {
        if (start > end) {
            return -1;
        }
        
        while (start <= end) {
            int mid = (start+end)/2;
        
            if (target == nums[mid]) {
                return mid;
            } else if (target < nums[mid]) {
                end = mid-1;
            } else {
                start = mid+1;
            }    
        }
        
        return -1;
    }
    
    public int search(int[] nums, int target) {
        if (nums == null || nums.length == 0) {
            return -1;
        }
        
        if (nums.length == 1) {
            return nums[0] == target ? 0 : -1;
        }
        
        int rotateIndex = findRotateIndex(nums, 0, nums.length-1);
        System.out.println("rotateIndex: " + rotateIndex);
        if (target == nums[rotateIndex]) {
            return rotateIndex;
        }
        
        if (rotateIndex == 0) {
            return searchInArray(nums, 0, nums.length-1, target);
        } else if (target >= nums[0]) {
            return searchInArray(nums, 0, rotateIndex-1, target);
        } else {
            return searchInArray(nums, rotateIndex, nums.length-1, target);
        }
    }
}