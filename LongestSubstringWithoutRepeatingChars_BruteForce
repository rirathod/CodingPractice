/*
Given a string, find the length of the longest substring without repeating characters.

Example 1:
Input: "abcabcbb"
Output: 3 
Explanation: The answer is "abc", with the length of 3. 

Example 2:
Input: "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.

Example 3:
Input: "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3. 
             Note that the answer must be a substring, "pwke" is a subsequence and not a substring.
*/

class Solution {
    public int lengthOfLongestSubstring(String s) {
        if (s == null) {
            return 0;
        }
                
        int ans = 0;
        int n = s.length();
        
        for (int i=0; i<n; i++) {
            for (int j=i+1; j<=n; j++) {
                
                boolean flag = isSubStringUnique(s, i, j);
                
                if (flag) {
                    ans = Math.max(ans, j-i);
                }
                System.out.println("i: " + i + "; j: " + j + "; flag: " + flag + "; ans: " + ans);
            }
        }
        
        return ans;
    }
    
    public boolean isSubStringUnique(String s, int start, int end) {
        HashSet<Character> set = new HashSet<Character>();
        for (int i=start; i<end; i++) {
            if (!set.contains(s.charAt(i))) {
                set.add(s.charAt(i));
            } else {
                return false;   
            }
        }
        
        return true;
    }
}
