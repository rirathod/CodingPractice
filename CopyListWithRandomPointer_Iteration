/**
A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.
Return a deep copy of the list.

The Linked List is represented in the input/output as a list of n nodes. Each node is represented as a pair of [val, random_index] where:
val: an integer representing Node.val
random_index: the index of the node (range from 0 to n-1) where random pointer points to, or null if it does not point to any node.
 
Example 1:
Input: head = [[7,null],[13,0],[11,4],[10,2],[1,0]]
Output: [[7,null],[13,0],[11,4],[10,2],[1,0]]

Example 2:
Input: head = [[1,1],[2,1]]
Output: [[1,1],[2,1]]

Example 3:
Input: head = [[3,null],[3,0],[3,null]]
Output: [[3,null],[3,0],[3,null]]

Example 4:
Input: head = []
Output: []

Explanation: Given linked list is empty (null pointer), so return null.

Constraints:
-10000 <= Node.val <= 10000
Node.random is null or pointing to a node in the linked list.
Number of Nodes will not exceed 1000.
**/

/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/

class Solution {
    HashMap<Node, Node> originalAndCloneMap = new HashMap<Node, Node>();
    
    public Node copyRandomList(Node head) {
        if (head == null) return head;
        
        Node newList = new Node(0);
        Node copyList = newList;
        Node iterator = head;
        while(iterator != null) {
            Node n = null;
            if (!originalAndCloneMap.containsKey(iterator)) {
                n = new Node(iterator.val);
                originalAndCloneMap.put(iterator, n);
            } else {
                n = originalAndCloneMap.get(iterator);    
            }
            
            if (iterator.next != null){
                if (originalAndCloneMap.containsKey(iterator.next)) {
                    n.next = originalAndCloneMap.get(iterator.next);
                } else {
                    n.next = new Node(iterator.next.val);
                    originalAndCloneMap.put(iterator.next, n.next);
                }  
            }
            
            if (iterator.random != null){
                if (originalAndCloneMap.containsKey(iterator.random)) {
                    n.random = originalAndCloneMap.get(iterator.random);
                } else {
                    n.random = new Node(iterator.random.val);
                    originalAndCloneMap.put(iterator.random, n.random);
                }  
            }
            
            iterator = iterator.next;
            newList.next = n;
            newList = newList.next;
        }
        
        return copyList.next;
    }
}
