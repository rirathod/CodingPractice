/**
Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.
Your algorithm's runtime complexity must be in the order of O(log n).
If the target is not found in the array, return [-1, -1].

Example 1:
Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]

Example 2:
Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
 
Constraints:
0 <= nums.length <= 10^5
-10^9 <= nums[i] <= 10^9
nums is a non decreasing array.
-10^9 <= target <= 10^9
**/

class Solution {
    public int[] searchRange(int[] nums, int target) {
        if (nums.length == 0) return new int[] {-1, -1};
        if (nums.length == 1) {
            if (nums[0] == target) {
                return new int[] {0, 0};
            } else {
                return new int[] {-1, -1};
            }
        }
        
        int start = 0;
        int end = nums.length-1;
        int mid = 0;
        
        while (start+1 < end) {
            mid = start + (end-start)/2;            
            if (target <= nums[mid]) {
                end = mid;
            } else {
                start = mid;
            }
        }
    
        int targetStart = -1;
        if (nums[start] == target) {
            targetStart = start;
        } else if (nums[end] == target) {
            targetStart = end;
        }
            
        if (targetStart != -1) {
            int count = 0;
            int i = targetStart+1;
            while(i<nums.length) {
                if (nums[i] == target) {
                    count++;
                    i++;
                    continue;
                }
                break;
            }
            return new int[] {targetStart, targetStart+count};
        }
        
        return new int[] {-1, -1};
    }
}
