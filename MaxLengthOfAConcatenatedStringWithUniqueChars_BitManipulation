/**
Given an array of strings arr. String s is a concatenation of a sub-sequence of arr which have unique characters.
Return the maximum possible length of s.

Example 1:
Input: arr = ["un","iq","ue"]
Output: 4
Explanation: All possible concatenations are "","un","iq","ue","uniq" and "ique".
Maximum length is 4.

Example 2:
Input: arr = ["cha","r","act","ers"]
Output: 6
Explanation: Possible solutions are "chaers" and "acters".

Example 3:
Input: arr = ["abcdefghijklmnopqrstuvwxyz"]
Output: 26

Constraints:
1 <= arr.length <= 16
1 <= arr[i].length <= 26
arr[i] contains only lower case English letters.
**/

class Solution {
    public int maxLength(List<String> arr) {
        int maxLength = 0;
        
        List<Integer> subsequenceChars = new ArrayList<Integer>();
        subsequenceChars.add(0);    // empty string
        
        for (String s: arr) {
            
            // Checking if s has duplicate chars or not
            int duplicate = 0;
            int sChars = 0;
            for (char c: s.toCharArray()) {
                duplicate |= (sChars & (1 << (c-'a')));    
                sChars |= (1 << (c - 'a'));
                
                if (duplicate > 0) break; 
            }
            if (duplicate > 0) continue;
            
            for (int i=subsequenceChars.size()-1; i>=0; i--) {
                
                if ((subsequenceChars.get(i) & sChars) > 0) continue;
                subsequenceChars.add(subsequenceChars.get(i) | sChars);
                maxLength = Math.max(maxLength, Integer.bitCount(subsequenceChars.get(i) | sChars));
            }
        }
        
        return maxLength;
    }
}
