/**
Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.
For example, given n = 3, a solution set is:

[
  "((()))",
  "(()())",
  "(())()",
  "()(())",
  "()()()"
]
**/

class Solution {
    List<String> result = new ArrayList<String>();
    HashSet<String> uniqueParentheseCombinations = new HashSet<String>();
    StringBuilder builder = new StringBuilder();
    
    public List<String> generateParenthesis(int n) {
        char[] parentheses = new char[n*2];
        generateParenthesesHelper(parentheses, 0);
        for (String s: uniqueParentheseCombinations) {
            result.add(s);
        }
        return result;
    }
    
    public void generateParenthesesHelper(char[] parentheses, int index) {
        if (index == parentheses.length) {
            String potentialCandidate = new String(parentheses);
            if (!uniqueParentheseCombinations.contains(potentialCandidate) && isValidParentheses(parentheses)) {
                uniqueParentheseCombinations.add(potentialCandidate);    
            }
        } else {
            parentheses[index] = '(';
            generateParenthesesHelper(parentheses, index+1);
            
            parentheses[index] = ')';
            generateParenthesesHelper(parentheses, index+1);
        }
    }
    
    public boolean isValidParentheses(char[] c) {        
        int balance = 0;
        
        for (int i=0; i<c.length; i++) {
            if (c[i] == '(') {
                balance++;
            } else {
                balance--;
            }
            
            if (balance < 0) return false;
        }
        
        return (balance == 0);
    }
    
    
    public void swap(char[] parentheses, int i, int j) {
        char temp = parentheses[i];
        parentheses[i] = parentheses[j];
        parentheses[j] = temp;
    }
}
